27/04/2019 (samedi)
Arrivé chez Ben (Lacanau) vendrdi soir, matériel installé, courses faites
Nuit correcte mais pas assez reposé ; levé 8h

Thème LudumDare 44 : "Your life is currency"

Brainstorming jusqu'à 09h30 => idée de l'exploitation de parcelle décrite dans design.txt
Plan général : avoir un moteur pour samedi soir, passer mon dimanche sur le polish
Approche : je vais rapidement coder un moteur de terrain pour "avoir quelque chose",
sans passer de temps sur un document de design initial ; j'ajouterai les règles
et éléments de gameplay incrémentalement au fur et à mesure de ce que j'aurai réussi
à réaliser et de mon temps disponible (plutôt que de renoncer à des idées régulièrement)

"Isométrique" en projection ou JV <=> Orthographic dans three.js :
https://en.wikipedia.org/wiki/Isometric_projection
https://stackoverflow.com/questions/23450588/isometric-camera-with-three-js
https://stackoverflow.com/questions/51623351/emulate-isometric-rendering-properly-in-three-js

Choupi ! (tweens pour croissance)
https://codepen.io/puritanner/pen/LbgMwo

Environnement technique :
 * javascript
 * Support inférence de type VSCode (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript)
 * threejs (r104)
 * vuejs (pour composants et possibilités du routeur pour accueil + jeu principal)
 * Serveur local : python -m http.server 8000

 Packer : plusieurs options :
 * pas de packer (modules JSM chargés par le navigateur)
 * j'ajouterai un packer post-soumission si trop de monde a des soucis (ou pour en mettre un au point au calme)
 * ou starter vuejs si j'arrive à y charger du glTF out of the box

Mais https://vuejs.org/v2/guide/installation.html n'oppose pas la CLI et l'inclusion via <script>, au contraire

Avantage de la CLI : j'ai un projet up and running immédiatement

Mise en place d'un helloworld vue minimal sans packer
Après quelques essais cela ne semble pas simple à utiliser si je veux utiliser des composants SFC (.vue)
=> utilisation de la CLI et croisage de doigts pour ne pas avoir de problèmes avec WebPack...

J'utilise ce tuto vue cli :
https://medium.com/codingthesmartway-com-blog/getting-started-with-vue-cli-3-1aecf529fc71

$ npm uninstall vue-cli -g
$ npm install -g @vue/cli
$ vue --version => 3.6.3
$ vue create woodlot-owner

Je choisis les options suivantes :
* Babel, router, linter
* History mode for router : Y (quoi que ça puisse être)
* Linter & formatter : ESLint + Standard
* Lint on save
* Config : dedicated config files
* Save as presets : N

Copie du contenu du répertoire dans LD44 une fois créé

Pour tester :
 $ npm run serve

Comment distribuer ? Tutorial ici :
https://medium.com/@Roli_Dori/deploy-vue-cli-3-project-to-github-pages-ebeda0705fbd

$ git branch gh-pages
création vue.config.js, pointant sur le nom du projet github
Commentaire de /dist dans .gitignore
$ npm run build
$ git add dist
$ git commit -m "Initial dist subtree commit"
$ git subtree push --prefix dist origin gh-pages
Dans Settings servir gh-pages (c'est le cas par défaut)

La doc officielle est ici :
https://cli.vuejs.org/guide/deployment.html#github-pages

Ensuite de manière générale, pour publier :
* faire un "npm run build"
* commiter normalement sur master (y compris dist)
* faire "git subtree push --prefix dist origin gh-pages" pour mettre gh-pages à jour

Site servi sur https://oparisy.github.io/LD44/
En local : http://localhost:8080/LD44/

Réorganisation pages du helloworld pour avoir au niveau du routeur /home et /game
Ajout de threejs via npm install three --save
Suppression de tous les ^ ppour bloquer les versions
=> quelques versions à aligner ensuite

Ecriture d'un composant "MainCanvas.vue" pour héberger le code threejs
Portage de https://codepen.io/puritanner/pen/LbgMwo pour avoir une base de code
Ajout d'un élément dans vue.config.js pour corriger automatiquement le plus possible d'erreurs remontées par le linter
Ajout de TWEEN : npm install @tweenjs/tween.js --save
Ajout de chroma-js
Je me suis aidé de https://stackoverflow.com/a/49295320/38096 pour intégrer threejs et vue (il faut respecter le cycle de vie)

Portage, pénible, style de codage bizarre : si je veux pouvoir utiliser "this", toutes les fonctions doivent être enregistrées auprès de vue ?
(syntaxe "methods"). Dont acte, mais à creuser plus tard.

Première version commitée

Pour fixer l'échelle je modélise dans blender "par-dessus" un plan de 1m en position (0,0,0), orientation par défaut
Pour partager un matériau : l'associer à un objet, le sélectionner, sélectionner tous les autres, Ctrl + L, "materials"
Gotcha : cocher "use nodes" dans le "shader editor", sinon le graphe de noeuds n'est pas pris en compte...
Pour faciliter l'utilisation dans le code, je définis un parent "empty" commun (Ctrl+P en sélectionnant l'empty en dernier)

Je peux utiliser les collections pour organiser mes arbres et les cacher à volonté (en cachant la collection)
Ainsi je peux utiliser le même setup d'éclairage et le plan de base, et modéliser les arbres dans la même scène

J'enlève Edit > Preferences > Navigation > Orbit&Pan > Auto Perspective pour pouvoir tourner avec les raccourcis numpad
sans repasser en perspective

Export des trois types d'arbres dans le même glTF (trees.glb) ; passe bien dans viewer Windows


J'ai pu réorganiser le code en l'exportant dans un module (une classe ES6 en fait)
=> style de programmation ES6 classique

Tentative de dimensionnement du canvas : un peu meilleur, mais les interactions avec flexbox restent un peu obscures
=> polish demain

Ajout d'un plan pour visualiser le sol, réglage position caméra pour éviter le clipping, les lumière ne sont plus colorées


Jalon suivant : charger modèles d'arbres, les faire "popper" aléatoirement sur grille Isométrique

Les assets "statiques" doivent être placés dans "public" et pas dans "assets" afin que webpack n'intervienne pas
C'est le cas de mes modèles glTF

Il faut ensuite obtenir le publicPath pour obtenir la "base URL"
=> le chargement fonctionne !
Push vers gh-pages (npm run build && commit && git subtree push --prefix dist origin gh-pages && git push)
pour vérifier fonctionnement en prod
=> OK sur gh-pages !

J'ai pu récupérer les modèles d'arbre (les Object3D racine puisque j'avais mis des empties) en faisant un
parcours du modèle de "scène" chargée depuis glTF et en filtrant par nom
Ensuite "instanciation" possible grâce à Object3D#clone()

J'ai un modèle minimal de sol (grille carrée gardant trace des emplacements ayant déjà un arbre)
et une pousse par tweening (aléatoire pour l'instant)

Tentative d'amélioration des positionnements, marges et tailles : j'ai pu planer un panel à gauche
du canvas, mais sinon résultats peu probants

Jalon suivants : afficher un "vrai" terrain, pouvoir cliquer pour planter des arbres
Pour garder les choses simples : chaque "tuile" de terrain sera un mesh et une géométrie, chaque arbre sera une géométrie
(dont le mesh "adulte" sera chargé depuis un glTF et partagé entre ces géométries)



28/04/2019 (dimanche)
Plusieurs réveils nocturnes, mais j'ai bien fait de prendre le temps de dormir
Allocation du temps restant :
- jusqu'à 13h max : core gameplay (compteurs, règles, interactions permettant de jouer)
- reste du temps : polish (effets 3D, son, page d'accueil, trois notes de musique...)

OK raycasting mis au point pour pouvoir détecter arbres (j'ai mis du temps à comprendre
comment ajuster avec le fait que le canevas ne prend pas l'ensemble de la fenêtre)

On peut maintenant cliquer sur les arbres pour les couper et être crédité !
Le mécanise de propagation de valeurs dans vue est plus "automatique" que je ne le craignais, bien

Travail important sur CSS, marge, positionnements...
En désespoir de cause j'ai redimensionné le canvas en JavaScript depuis mounted()
